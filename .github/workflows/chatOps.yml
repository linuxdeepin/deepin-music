name: chatOps
on:
  issue_comment:
    types: [created]

jobs:
  chatopt:
    if: contains(github.event.comment.html_url, '/pull/')
    runs-on: [ubuntu-latest]
    steps:
      - run: export
      - uses: actions/github-script@v5
        with:
          script: |
            console.log(context)
            console.log(context.payload.issue.user)
            console.log(context.payload.issue.labels)
            console.log(context.payload.issue.pull_request)

      - name: assign
        uses: actions/github-script@v5
        if: contains(github.event.comment.body, '/assign')
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
        with:
          script: |
            const { COMMENT_BODY } = process.env
            const groups = COMMENT_BODY.match(/\/assign \@(\S+)/)
            groups && await github.rest.issues.addAssignees({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              assignees: groups[1]
            })

      - name: review
        uses: actions/github-script@v5
        if: contains(github.event.comment.body, '/review')
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
        with:
          script: |
            const { COMMENT_BODY } = process.env
            const command = COMMENT_BODY.match(/\/review (\@\w+ )+/)
            if ( !command || !command[0] ){
              return
            }
            const users = command[0].match(/\@\w+/g)
            if( !user ){
              return
            }
            await github.rest.pulls.requestReviewers({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              reviewers: users.map(a=>a.slice(1))
            });

      - name: "approve"
        uses: actions/github-script@v5
        if: contains(github.event.comment.body, '/+1') || contains(github.event.comment.body, '/approe')
        with:
          script: |
            if(context.payload.sender.id == context.payload.issue.user.id){
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: 'Permission denied'
              })
              return
            }
            await github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['approve']
            })

      - name: merge
        uses: actions/github-script@v5
        if: contains(github.event.comment.body, '/merge')
        env:
          REF: ${{ github.event.pull_request.head.ref }}
        with:
          script: |
            if(context.payload.sender.id != context.payload.issue.user.id){
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: 'Permission denied'
              })
              return
            }

            const pull = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
            })

            if( pull.data.mergeable_state != "clean" ){
              if(context.payload.sender.id != context.payload.issue.user.id){
                  await github.rest.issues.createComment({
                    issue_number: context.issue.number,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: pull.data.mergeable_state
                  })
                  return
              }
            }

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'merged'
            })
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
              merge_method: 'rebase'
            });
